#!/usr/bin/python3

# Interestingness test for crashes

import os
import re
import subprocess
import sys
import time

# Check that the program compiles with a recent clang
result: subprocess.CompletedProcess = subprocess.run(
    ["clang-15", "-I", "{{ csmith_root }}/runtime", "-I", "{{ csmith_root }}/build/runtime", "-pedantic", "-Wall",
     "-O0", "-c", "{{ program_to_check }}"], capture_output=True)
if result.returncode != 0:
    sys.exit(1)

# Check the program is free from various telltale clang compiler warnings
output: str = result.stdout.decode('utf-8') + result.stderr.decode('utf-8')

# If `clang-csmith-original-warnings.txt` does not exist, this is the first pass of the reduction.
# In this case, we save the pre-reduction warnings generated by clang to the file.
# If the file already exists, we compare the clang warnings from the reduced program against the
# original warnings to check if any new warnings are introduced.
if os.path.exists("{{ csmith_original_warnings_dir }}/clang-csmith-original-warnings.txt"):
    with open("{{ csmith_original_warnings_dir }}/clang-csmith-original-warnings.txt", "r") as clang_warning_file:
        clang_original_warnings_set = set([warning.rstrip() for warning in clang_warning_file.readlines()])
    clang_new_warnings_set = set(re.findall(r'\[-W.*\]', output))
    if len(clang_new_warnings_set - clang_original_warnings_set) != 0:
        # new warnings appear
        sys.exit(2)
else:
    clang_warnings_set = set(re.findall(r'\[-W.*\]', output))
    with open("{{ csmith_original_warnings_dir }}/clang-csmith-original-warnings.txt", "w") as clang_warning_file:
        for warning in clang_warnings_set:
            clang_warning_file.write(f"{warning}\n")

# Check the program compiles with a recent gcc
result = subprocess.run(
    ["gcc-12", "-I", "{{ csmith_root }}/runtime", "-I", "{{ csmith_root }}/build/runtime", "-c", "-Wall", "-Wextra", "-O3",
     "{{ program_to_check }}"], capture_output=True)
if result.returncode != 0:
    sys.exit(3)

# Check the program is free from various telltale gcc compiler warnings
output: str = result.stdout.decode('utf-8') + result.stderr.decode('utf-8')

# If `gcc-csmith-original-warnings.txt` does not exist, this is the first pass of the reduction.
# In this case, we save the pre-reduction warnings generated by gcc to the file.
# If the file already exists, we compare the gcc warnings from the reduced program against the
# original warnings to check if any new warnings are introduced.
if os.path.exists("{{ csmith_original_warnings_dir }}/gcc-csmith-original-warnings.txt"):
    with open("{{ csmith_original_warnings_dir }}/gcc-csmith-original-warnings.txt", "r") as gcc_warning_file:
        gcc_original_warnings_set = set([warning.rstrip() for warning in gcc_warning_file.readlines()])
    gcc_new_warnings_set = set([re.sub(r"‘[^’]*’", "*", warning) for warning in re.findall(r'warning: .*', output)])
    if len(gcc_new_warnings_set - gcc_original_warnings_set) != 0:
        # new warnings appear
        sys.exit(4)
else:
    gcc_warnings_set = set([re.sub(r"‘[^’]*’", "*", warning) for warning in re.findall(r'warning: .*', output)])
    with open("{{ csmith_original_warnings_dir }}/gcc-csmith-original-warnings.txt", "w") as gcc_warning_file:
        for warning in gcc_warnings_set:
            gcc_warning_file.write(f"{warning}\n")


# Compile with the unmutated compiler, timing how long this takes
compile_start = time.time()
result = subprocess.run(
    ["{{ mutated_compiler_executable }}", "-I", "{{ csmith_root }}/runtime", "-I", "{{ csmith_root }}/build/runtime",
     "-O3", "{{ program_to_check }}", "-o", "__regular"], capture_output=True)
compile_end = time.time()

# Compilation with the non-mutated compiler should succeed
if result.returncode != 0:
    sys.exit(5)

# Compile with the mutated compiler, allowing compilation to take substantially longer
try:
    dredd_environment = os.environ.copy()
    dredd_environment["DREDD_ENABLED_MUTATION"] = "{{ mutation_ids }}"
    result = subprocess.run(["{{ mutated_compiler_executable }}", "-fno-crash-diagnostics", "-I", "{{ csmith_root }}/runtime",
                             "-I", "{{ csmith_root }}/build/runtime", "-O3", "{{ program_to_check }}", "-o", "__mutated"],
                            capture_output=True,
                            timeout=max({{min_timeout_for_mutant_compilation}},
                                        {{timeout_multiplier_for_mutant_compilation}} * (compile_end - compile_start)),
                            env=dredd_environment)
    if result.returncode == 0:
        # Compilation with the mutated compiler succeeded, which is not
        # interesting as we are looking for a mutation-induced
        # compiler crash
        sys.exit(6)
except subprocess.TimeoutExpired:
    # Compilation with the mutated compiler timed out, which is not
    # interesting as we are looking for a mutation-induced
    # compiler crash
    sys.exit(7)

sys.exit(0)
